{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","_ref","title","description","image","pathname","article","react_default","a","createElement","gatsby_browser_entry","query","render","_ref2","_ref2$site","site","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","Fragment","Helmet","name","content","property","data","_1387910276","propTypes","PropTypes","string","bool","defaultProps","__webpack_require__","d","__webpack_exports__","blog_post_query","markdownRemark","frontmatter","html","fields","excerpt","components_SEO","slug","date","dangerouslySetInnerHTML","__html"],"mappings":"+JAKMA,EAAM,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,YAAaC,EAAvBH,EAAuBG,MAAOC,EAA9BJ,EAA8BI,SAAUC,EAAxCL,EAAwCK,QAAxC,OACVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAOA,EACPC,OAAQ,SAAAC,GASF,IAAAC,EAAAD,EARJE,KACEC,EAOEF,EAPFE,aACAC,EAMEH,EANFG,cACAC,EAKEJ,EALFI,mBACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,aACAC,EAEEP,EAFFO,gBAGIC,EAAM,CACVpB,MAAOA,GAASc,EAChBb,YAAaA,GAAee,EAC5Bd,MAAK,GAAKe,GAAUf,GAASgB,GAC7BG,IAAG,GAAKJ,GAAUd,GAAY,MAEhC,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,OAAD,CAAQvB,MAAOoB,EAAIpB,MAAOe,cAAeA,GACvCV,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,cAAcC,QAASL,EAAInB,cACtCI,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,QAAQC,QAASL,EAAIlB,QAC/BkB,EAAIC,KAAOhB,EAAAC,EAAAC,cAAA,QAAMmB,SAAS,SAASD,QAASL,EAAIC,OAC/CjB,EAAiB,KACjBC,EAAAC,EAAAC,cAAA,QAAMmB,SAAS,UAAUD,QAAQ,YAElCL,EAAIpB,OAASK,EAAAC,EAAAC,cAAA,QAAMmB,SAAS,WAAWD,QAASL,EAAIpB,QACpDoB,EAAInB,aACHI,EAAAC,EAAAC,cAAA,QAAMmB,SAAS,iBAAiBD,QAASL,EAAInB,cAE9CmB,EAAIlB,OAASG,EAAAC,EAAAC,cAAA,QAAMmB,SAAS,WAAWD,QAASL,EAAIlB,QACrDG,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,eAAeC,QAAQ,wBACjCN,GACCd,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,kBAAkBC,QAASN,IAEvCC,EAAIpB,OAASK,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,gBAAgBC,QAASL,EAAIpB,QACrDoB,EAAInB,aACHI,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,sBAAsBC,QAASL,EAAInB,cAE/CmB,EAAIlB,OAASG,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,gBAAgBC,QAASL,EAAIlB,WAxChEyB,KAAAC,KAgDa9B,IAETW,EAAK,aAeXX,EAAI+B,UAAY,CACd7B,MAAO8B,IAAUC,OACjB9B,YAAa6B,IAAUC,OACvB7B,MAAO4B,IAAUC,OACjB5B,SAAU2B,IAAUC,OACpB3B,QAAS0B,IAAUE,MAGrBlC,EAAImC,aAAe,CACjBjC,MAAO,KACPC,YAAa,KACbC,MAAO,KACPC,SAAU,KACVC,SAAS,GCpFX8B,EAAAC,EAAAC,EAAA,0BAAAC,IAIeD,EAAA,iBAAArC,GAAc,IACnBuC,EADmBvC,EAAX4B,KACRW,eACAC,EAAuCD,EAAvCC,YAAaC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,OAAQC,EAAYJ,EAAZI,QACnC,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,CACE3C,MAAOuC,EAAYvC,MACnBC,YAAasC,EAAYtC,aAAeyC,GAAW,UACnDvC,SAAUsC,EAAOG,KACjBxC,SAAO,IAETC,EAAAC,EAAAC,cAAA,UAAKgC,EAAYvC,OACjBK,EAAAC,EAAAC,cAAA,UAAKgC,EAAYM,MACjBxC,EAAAC,EAAAC,cAAA,OAAKuC,wBAAyB,CAAEC,OAAQP,OAb/B,IAkBF/B,EAAK","file":"component---src-templates-blog-post-js-12f2a70339c06c4e04f4.js","sourcesContent":["import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nconst SEO = ({ title, description, image, pathname, article }) => (\r\n  <StaticQuery\r\n    query={query}\r\n    render={({\r\n      site: {\r\n        defaultTitle,\r\n        titleTemplate,\r\n        defaultDescription,\r\n        siteUrl,\r\n        defaultImage,\r\n        twitterUsername,\r\n      }\r\n    }) => {\r\n      const seo = {\r\n        title: title || defaultTitle,\r\n        description: description || defaultDescription,\r\n        image: `${siteUrl}${image || defaultImage}`,\r\n        url: `${siteUrl}${pathname || '/'}`,\r\n      }\r\n      return (\r\n        <>\r\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\r\n            <meta name=\"description\" content={seo.description} />\r\n            <meta name=\"image\" content={seo.image} />\r\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\r\n            {(article ? true : null) && (\r\n              <meta property=\"og:type\" content=\"article\" />\r\n            )}\r\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\r\n            {seo.description && (\r\n              <meta property=\"og:description\" content={seo.description} />\r\n            )}\r\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            {twitterUsername && (\r\n              <meta name=\"twitter:creator\" content={twitterUsername} />\r\n            )}\r\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\r\n            {seo.description && (\r\n              <meta name=\"twitter:description\" content={seo.description} />\r\n            )}\r\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\r\n          </Helmet>\r\n        </>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport default SEO\r\n\r\nconst query = graphql`\r\n  query SEO {\r\n    site {\r\n      siteMetadata {\r\n        defaultTitle: title\r\n        titleTemplate\r\n        defaultDescription: description\r\n        siteUrl\r\n        defaultImage: image\r\n        twitterUsername\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nSEO.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  image: PropTypes.string,\r\n  pathname: PropTypes.string,\r\n  article: PropTypes.bool,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  title: null,\r\n  description: null,\r\n  image: null,\r\n  pathname: null,\r\n  article: false\r\n}","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport SEO from \"../components/SEO\"\r\n\r\nexport default ({ data }) => {\r\n  const { markdownRemark } = data\r\n  const { frontmatter, html, fields, excerpt } = markdownRemark\r\n  return (\r\n    <div>\r\n      <SEO\r\n        title={frontmatter.title}\r\n        description={frontmatter.description || excerpt || 'nothinâ€™'}\r\n        pathname={fields.slug}\r\n        article\r\n      />\r\n      <h1>{frontmatter.title}</h1>\r\n      <h2>{frontmatter.date}</h2>\r\n      <div dangerouslySetInnerHTML={{ __html: html }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        description\r\n        date(\r\n          formatString: \"LL\",\r\n          locale: \"zh-cn\"\r\n        )\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}