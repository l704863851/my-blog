{"data":{"markdownRemark":{"html":"<p>调用栈是解释器（就像浏览器中的javascript解释器）追踪函数执行流的一种机制。当执行环境中调用了多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体中又调用了哪个函数。</p>\n<p>每调用一个函数，解释器就会把该函数添加进调用栈并开始执行。\n正在调用栈中执行的函数还调用了其它函数，那么新函数也将会被添加进调用栈，一旦这个函数被调用，便会立即执行。\n当前函数执行完毕后，解释器将其清出调用栈，继续执行当前执行环境下的剩余的代码。\n当分配的调用栈空间被占满时，会引发“堆栈溢出”。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function greeting() {\n   // [1] Some codes here\n   sayHi();\n   // [2] Some codes here\n}\nfunction sayHi() {\n   return &quot;Hi!&quot;;\n}\n\n// 调用 `greeting` 函数\ngreeting();\n\n// [3] Some codes here</code></pre></div>\n<p>上面的代码将这样执行:</p>\n<ol>\n<li>忽略前面所有函数，直到greeting()函数被调用。</li>\n<li>把greeting()添加进调用栈列表。</li>\n<li>\n<p>执行greeting()函数体中的所有代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">调用栈列表:\ngreeting</code></pre></div>\n</li>\n<li>代码执行到sayHi()时，该函数被调用。</li>\n<li>把sayHi()添加进调用栈列表。</li>\n<li>\n<p>执行sayHi()函数体中的代码，直到全部执行完毕。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">调用栈列表:\ngreeting\nsayHi</code></pre></div>\n</li>\n<li>返回来继续执行greeting()函数体中sayHi()后面的代码。</li>\n<li>删除调用栈列表中的sayHi()函数。</li>\n<li>\n<p>当greeting()函数体中的代码全部执行完毕，返回到调用greeting()的代码行，继续执行剩余JS代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">调用栈列表:\ngreeting</code></pre></div>\n</li>\n<li>删除调用栈列表中的greeting()函数。\n一开始，我们得到一个空空如也的调用栈。随后，每当有函数被调用都会自动地添加进调用栈，执行完函数体中的代码后，调用栈又会自动地移除这个函数。最后，我们又得到了一个空空如也的调用栈。</li>\n</ol>","excerpt":"调用栈是解释器（就像浏览器中的javascript…","frontmatter":{"title":"firstblod","description":"","date":"三月 01, 2019"},"fields":{"slug":"/posts/xx/"}}},"pageContext":{"slug":"/posts/xx/"}}